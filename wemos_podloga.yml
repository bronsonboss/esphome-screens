esphome:
  name: wemos-podloga
  friendly_name: wemos-podloga

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "poRZDfYUZ/SikFrovkJAvDU4E6IpAiy6SH8yEi6fpDc="

ota:
  password: "b6c2ee943a32d3dcb8ea824fb803ea93"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wemos-Podloga Fallback Hotspot"
    password: "v3q2qEKfngun"

captive_portal:


dallas:
  - pin: D3
    update_interval: 2s

i2c:
  sda: D7
  scl: D5
  #scan: True
  id: bus_a
  frequency: 400kHz

globals:

  # if water temperature below this threshold
  # pump demand automatic will be 'off' (false)
  - id: g_threshold_temp_off
    type: float
    restore_value: yes
    initial_value: "26.0"

  # if water temperature above this threshold
  # pump demand automatic will be 'on' (true)
  - id: g_threshold_temp_on
    type: float
    restore_value: yes
    initial_value: "29.0"

sensor:
  - platform: dallas
    address: 0x960216254aacee28
    name: "Bojler CWU"
    id: kociol_zasilanie
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - delta: 0.1
    on_value:
      then:
        # the controller is notified when the water temperature crosses
        # one of the thresholds
        - lambda: |-

            /* only submit when something has changed */
            auto water_temperature = id(kociol_zasilanie).state;

            if (
              water_temperature < id(g_threshold_temp_off) && (id(s20_relay).state)
              ){
                  id(s20_relay).turn_off();
            } 
            else if (
              water_temperature > id(g_threshold_temp_on) && !(id(s20_relay).state)
              ){
                  id(s20_relay).turn_on();
            }

  - platform: template
    name: "Threshold off"
    id: target_temperature_low 
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    lambda: return id(g_threshold_temp_off);
    update_interval: 1ms
    filters:
      - delta: 0.1

  - platform: template
    id: target_temperature_high 
    name: "Threshold on"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    lambda: return id(g_threshold_temp_on);
    update_interval: 1ms
    filters:
      - delta: 0.1

climate:
  - platform: thermostat
    visual:
      min_temperature: 20
      max_temperature: 60
      temperature_step:
        target_temperature: 1
        current_temperature: 0.1
    name: "Thermostat Climate Controller"
    sensor: kociol_zasilanie
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    heat_deadband: 1 °C
    heat_overrun: 1 °C
    min_idle_time: 30s
    heat_action:
      - switch.turn_off: s20_relay
    idle_action:
      - switch.turn_on: s20_relay
    default_preset: Home
    on_boot_restore_from: memory
    preset:
      - name: Home
        default_target_temperature_low: 20 °C
        mode: HEAT


switch:
  - platform: gpio
    name: "Relay"
    restore_mode : ALWAYS_OFF
    pin: D1
    inverted: false
    id: s20_relay
    icon: "mdi:pump"

binary_sensor:
  # template sensor to publish pump state
  - platform: template
    name: "Pump"
    id: sensor_pump_state
    lambda: return id(s20_relay).state;


font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 20

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    brightness: 100%
    contrast: 100%
    #reset_pin: D0
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(roboto), "%.1f°C", id(kociol_zasilanie).state);
      it.print(0, 30, id(roboto), "Hello World!");

